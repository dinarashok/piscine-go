        func Rot14(str string) string {
        	stringRot14 := ""
        	for _, value := range str {
        		if value >= 'a' && value <= 'l' || value >= 'A' && value <= 'L' {
        			stringRot14 = stringRot14 + string(value+14)
        		} else if value >= 'm' && value <= 'z' || value >= 'M' && value <= 'Z' {
        			stringRot14 = stringRot14 + string(value-12)
        		} else { // случай пробела - string от пробела
        			stringRot14 = stringRot14 + string(value)
        		}
        	}
        	return stringRot14
        }


        func Max(arr []int) int {
        	max := arr[0]

        	for i := range arr {
        		if max < arr[i] {
        			max = arr[i]
        		}

        	}
        	return max
        }

    //Params
        func main() {
    	answer := os.Args
    	count := 0
    	for range answer {
    		count++
    	}
    	for i := 1; i < count; i++ {
    		for _, i2 := range answer[i] {
    			z01.PrintRune(i2)
    		}
    		z01.PrintRune(10)
    	}
    }

       
        func Unmatch(arr []int) int {
        	len := 0
        	for range arr {
        		len++
        	}
        	for i := 0; i < len; i++ {
        		for j := i + 1; j < len; j++ {
        			if arr[i] > arr[j] {
        				t := arr[i]
        				arr[i] = arr[j]
        				arr[j] = t
        			}
        		}
        	}
        	for i := 0; i < len; i++ {
        		s := 0
        		for j := 0; j < len; j++ {
        			if arr[i] == arr[j] && i != j {
        				s++
        			}
        			if s%2 == 0 && j == len-1 {
        				return arr[i]
        			}
        		}
        	}
        	return -1
        }

    func Sqrt(nb int) int {
    	var sqrt int
    	for a := 1; a <= nb; a++ {
    		if a*a == nb {
    			sqrt = a
    		}
    	}
    	return sqrt
    }


    func Compare(a, b string) int {
    	RuneA := []rune(a)
    	RuneB := []rune(b)

    	// find lenths of those massives
    	lenA := 0
    	lenB := 0
    	for range RuneA {
    		lenA++
    	}
    	for range RuneB {
    		lenB++
    	}

    	for i := 0; i <= lenA-lenB; i++ {
    		if a == b {
    			return 0
    		}
    		if a > b {
    			return 1
    		}
    	}
    	return -1
    }


    func Atoi(s string) int {
    	x := 0 //our answer int
    	z := 1 //positive sign by default

    	for i, value := range s {
    		y := 0
    		if value < '0' || value > '9' {
    			if value == '-' || value == '+' {
    				if i != 0 {
    					return 0
    				}
    				if value == '-' {
    					z = -1
    				}
    			} else {
    				return 0
    			}
    		}
    		for i := '1'; i <= value; i++ {
    			y++

    		}
    		x = x*10 + z*y
    	}
    	return x
    }


    func Capitalize(s string) string {
    	lenS := 0
    	RuneS := []rune(s)
    	for range RuneS {
    		lenS++
    	}
    	for i := 0; i < lenS; i++ {
    		if RuneS[i] >= 'A' && RuneS[i] <= 'Z' {
    			RuneS[i] = (RuneS[i] + 32)
    		}
    		if RuneS[0] >= 'a' && RuneS[0] <= 'z' {
    			RuneS[0] = (RuneS[0] - 32)
    		}
    		if i > 0 {
    			if (RuneS[i-1] > 'Z' && RuneS[i-1] < 'a') || (RuneS[i-1] < 'A' && RuneS[i-1] > '9') || RuneS[i-1] < '0' || RuneS[i-1] > 'z' {
    				if RuneS[i] >= 'a' && RuneS[i] <= 'z' {
    					RuneS[i] = (RuneS[i] - 32)
    				}
    			}
    		}
    	}
    	answer := string(RuneS)
    	return answer
    }

    func IsPrime(nb int) bool {
    	prime := true
    	if nb > 1 {
    		for a := 2; a < nb; a++ {
    			if nb%a == 0 {
    				prime = false
    			}
    		}
    	} else {
    		prime = false
    	}
    	return prime
    }
